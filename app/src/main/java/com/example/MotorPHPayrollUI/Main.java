/*
 * This source file was generated by the Gradle 'init' task
 */
package com.example.MotorPHPayrollUI;

import java.util.*;
import java.io.*;

public class Main {
    private static List<Employee> employees = new ArrayList<>();
    
    public static void main(String[] args) {
        loadEmployeesFromCSV(); // Load saved employees

        Scanner scanner = new Scanner(System.in);
        int choice = 0;

        do {
            System.out.println("\n**********************************************");
            System.out.println("\nMotorPH Payroll System");
            System.out.println("1. Add Employee");
            System.out.println("2. View Employees");
            System.out.println("3. Edit Employee");
            System.out.println("4. Delete Employee");
            System.out.println("5. Calculate Salary");
            System.out.println("6. Exit");
            System.out.print("Choose an option: ");

            try {
                choice = scanner.nextInt();
                scanner.nextLine(); // consume newline

                switch (choice) {
                    case 1:
                        try {
                            System.out.println("\n**********************************************");
                            System.out.print("Enter ID: ");
                            int id = scanner.nextInt();
                            scanner.nextLine();

                            System.out.print("Enter Name: ");
                            String name = scanner.nextLine();
                            
                            System.out.print("Enter Birthday (MM/DD/YYYY): ");
                            String birthday = scanner.nextLine();

                            System.out.print("Enter Position: ");
                            String position = scanner.nextLine();

                            System.out.print("Enter Daily Rate: ");
                            double rate = scanner.nextDouble();
                            scanner.nextLine();

                            System.out.print("Enter Department: ");
                            String dept = scanner.nextLine();

                            System.out.print("Enter Status: ");
                            String status = scanner.nextLine();
                            

                            addEmployee(new Employee(id, name, birthday, position, rate, dept, status));
                        } catch (InputMismatchException e) {
                            System.out.println("\n**********************************************");
                            System.out.println("Invalid input. Please enter correct values." + e.getMessage());
                            scanner.nextLine();
                        }
                        break;

                    case 2:
                        viewEmployees();
                        break;

                    case 3:
                        try {
                            System.out.println("\n**********************************************");
                            System.out.print("Enter Employee ID to edit: ");
                            int editId = scanner.nextInt();
                            scanner.nextLine();

                            System.out.print("New Name: ");
                            String newName = scanner.nextLine();
                            
                            System.out.println("New Birthday:");
                            String newBirthday = scanner.nextLine();

                            System.out.print("New Position: ");
                            String newPosition = scanner.nextLine();

                            System.out.print("New Daily Rate: ");
                            double newRate = scanner.nextDouble();
                            scanner.nextLine();

                            System.out.print("New Department: ");
                            String newDept = scanner.nextLine();

                            System.out.print("New Status: ");
                            String newStatus = scanner.nextLine();

                            editEmployee(editId, newName, newBirthday, newPosition, newRate, newDept, newStatus);
                        } catch (InputMismatchException e) {
                            System.out.println("\n**********************************************");
                            System.out.println("Invalid input.");
                            scanner.nextLine(); 
                        }
                        break;

                    case 4:
                        try {
                            System.out.println("\n**********************************************");
                            System.out.print("Enter Employee ID to delete: ");
                            int deleteId = scanner.nextInt();
                            scanner.nextLine();
                            deleteEmployee(deleteId);
                        } catch (InputMismatchException e) {
                            System.out.println("\n**********************************************");
                            System.out.println("Invalid input." + e.getMessage());
                            scanner.nextLine();
                        }
                        break;
                        
                    case 5:
                        try {
                            System.out.print("Enter Employee ID: ");
                            int empId = scanner.nextInt();
                            scanner.nextLine();

                            Employee emp = findEmployeeById(empId);
                            if (emp == null) {
                            System.out.println("Employee not found.");
                            break;
                            }

                            System.out.print("Enter days worked: ");
                            int daysWorked = scanner.nextInt();

                            System.out.print("Enter overtime hours: ");
                            int overtimeHours = scanner.nextInt();
                            scanner.nextLine(); // consume newline

                            System.out.print("Enter start date (yyyy-mm-dd): ");
                            String startDateStr = scanner.nextLine();
                            System.out.print("Enter end date (yyyy-mm-dd): ");
                            String endDateStr = scanner.nextLine();

                            Date startDate = java.sql.Date.valueOf(startDateStr);
                            Date endDate = java.sql.Date.valueOf(endDateStr);

                            PayrollRecord payroll = new PayrollRecord(emp, daysWorked, overtimeHours, startDate, endDate);
                            payroll.calculateGrossPay();

                            GovernmentDeduction deduction = new GovernmentDeduction();
                            payroll.calculateDeductions(deduction);
                            payroll.calculateNetPay();

                            System.out.println("\nPayroll Summary:");
                            System.out.println("Employee: " + emp.getName());
                            System.out.println("Gross Pay: PHP " + payroll.getGrossPay());
                            System.out.println("Total Deductions: PHP " + payroll.getDeductions());
                            System.out.println("Net Pay: PHP " + payroll.getNetPay());

                        } catch (Exception e) {
                            System.out.println("Error calculating salary: " + e.getMessage());
                            scanner.nextLine(); // Clear buffer
                        }
                    break;

                    case 6:
                        
                        System.out.println("\n**********************************************");
                        System.out.println("Exiting...");
                        break;

                    default:
                        System.out.println("\n**********************************************");
                        System.out.println("Invalid option. Choose 1 to 5.");
                }
            } catch (InputMismatchException e) {
                System.out.println("\n**********************************************");
                System.out.println("Invalid input. Please enter a number." + e.getMessage());
                scanner.nextLine();
            }
        }
        while(choice != 6);

        scanner.close();
    }

    public static void addEmployee(Employee emp) {
        employees.add(emp);
        System.out.println("\n**********************************************");
        System.out.println("Employee added: " + emp.getName());
        saveEmployeesToCSV();
        
    }

    public static void viewEmployees() {
        System.out.println("\n**********************************************");
        System.out.println("\nEmployee List:");
        if (employees.isEmpty()) {
            System.out.println("No employees found.");
        } else {
            for (Employee e : employees) {
                System.out.println("ID: " + e.getId() + "| Name: " + e.getName() + 
                        "| Birthday: " +e.getBirthday() + "| Position: " + e.getPosition() + 
                        "| Daily Rate: " + e.getDailyRate() + "| Department: " + e.getDepartment() + 
                        "| Status: " + e.getStatus());
            }
        }
    }

    public static void editEmployee(int id, String name, String birthday, String position, double dailyRate, String department, String status) {
        for (Employee e : employees) {
            if (e.getId() == id) {
                e.setName(name);
                e.setBirthday(birthday);
                e.setPosition(position);
                e.setDailyRate(dailyRate);
                e.setDepartment(department);
                e.setStatus(status);
                System.out.println("\n**********************************************");
                System.out.println("Employee ID " + id + " updated.");
                saveEmployeesToCSV();
                return;
            }
        }
        System.out.println("\n**********************************************");
        System.out.println("Employee ID " + id + " not found.");
    }

    public static void deleteEmployee(int id) {
        Iterator<Employee> iterator = employees.iterator();
        while (iterator.hasNext()) {
            Employee e = iterator.next();
            if (e.getId() == id) {
                iterator.remove();
                System.out.println("\n**********************************************");
                System.out.println("Employee ID " + id + " deleted.");
                saveEmployeesToCSV();
                return;
            }
        }
        System.out.println("\n**********************************************");
        System.out.println("Employee ID " + id + " not found.");
    }

    public static void saveEmployeesToCSV() {
        try (PrintWriter writer = new PrintWriter(new File("employees.csv"))) {
            writer.println("ID,Name,Birthday,Position,DailyRate,Department,Status");
            for (Employee e : employees) {
                writer.printf("%d,%s,%s,%s,%.2f,%s,%s%n",
                        e.getId(), e.getName(), e.getBirthday(), e.getPosition(), e.getDailyRate(),
                        e.getDepartment(), e.getStatus());
            }
            System.out.println("\n**********************************************");
            System.out.println("Data saved to employees.csv");
        } catch (FileNotFoundException e) {
            System.out.println("\n**********************************************");
            System.out.println("Error saving to CSV: " + e.getMessage());
        }
    }

    public static void loadEmployeesFromCSV() {
        File file = new File("employees.csv");
        if (!file.exists()) {
            System.out.println("\n**********************************************");
            System.out.println("No employee CSV found. Starting fresh.");
            return;
        }

        try (Scanner fileScanner = new Scanner(file)) {
            fileScanner.nextLine(); 
            while (fileScanner.hasNextLine()) {
                String line = fileScanner.nextLine();
                String[] data = line.split(",");

                int id = Integer.parseInt(data[0]);
                String name = data[1];
                String birthday = data[2];
                String position = data[3];
                double rate = Double.parseDouble(data[4]);
                String department = data[5];
                String status = data[6];

                employees.add(new Employee(id, name, birthday, position, rate, department, status));
            }
            System.out.println("\n**********************************************");
            System.out.println("Employees loaded from CSV.");
        } catch (Exception e) {
            System.out.println("\n**********************************************");
            System.out.println("Error reading CSV: " + e.getMessage());
        }
        
    }
    public static Employee findEmployeeById(int id) {
    for (Employee e : employees) {
        if (e.getId() == id) {
            return e;
        }
    }
    return null;
}
}